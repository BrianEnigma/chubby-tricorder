#include <Wire.h>
#include <Keypad.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h>
#include "Adafruit_Thermal.h"
#include <avr/pgmspace.h>

// Debug settings
#define DEBUG_FAST_STARTUP_ANIM
//#define DEBUG_SKIP_STARTUP

// #######################################################
// IMAGES BEGIN
// Really, Arduino IDE??? These have to be inline and not in an include file?
#define PROBE1_1_WIDTH  56
#define PROBE1_1_HEIGHT 56
#define PROBE1_1_X  36
#define PROBE1_1_Y 0
static unsigned char PROGMEM PROBE1_1[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x7D,0x40,0x00,0x00,0x00,0x00
,0x15,0x00,0xA8,0x00,0x00,0x00,0x00,0xB0,0x04,0x0A,0x00,0x00,0x00,0x01,0x40,0x6E
,0x02,0x80,0x00,0x00,0x06,0x00,0x0A,0x00,0xE0,0x00,0x00,0x08,0x00,0x68,0x00,0x10
,0x00,0x00,0x2B,0x40,0x3A,0x03,0x14,0x00,0x00,0x21,0x40,0x1C,0x02,0x02,0x00,0x00
,0xC1,0x40,0x18,0x02,0x02,0x00,0x01,0x02,0x40,0x18,0x03,0x01,0x00,0x01,0x00,0x40
,0x00,0x00,0x00,0x80,0x05,0x00,0x00,0x08,0x00,0x00,0x40,0x02,0x00,0x00,0x08,0x00
,0x06,0x40,0x04,0x00,0x00,0x00,0x00,0x05,0x30,0x0D,0x70,0x00,0x08,0x00,0x01,0x20
,0x09,0x50,0x00,0x08,0x00,0x02,0x10,0x11,0xD0,0x00,0x08,0x00,0x07,0x08,0x11,0x60
,0x00,0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x0C,0x10,0x00,0x00,0x08
,0x00,0x00,0x08,0x20,0x00,0x00,0x08,0x00,0x00,0x04,0x40,0x00,0x00,0x08,0x00,0x00
,0x04,0x20,0x00,0x00,0x08,0x00,0x00,0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x44,0x44
,0x00,0x00,0x08,0x00,0x00,0xE2,0x2A,0x00,0x00,0x08,0x00,0x00,0x20,0x4B,0x00,0x00
,0x18,0x00,0x00,0x96,0x4B,0x00,0x00,0x1C,0x00,0x00,0x92,0x0A,0x00,0x00,0x0A,0x00
,0x00,0x62,0x60,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x02
,0x40,0x00,0x00,0x00,0x30,0x00,0x02,0x20,0x00,0x00,0x00,0x0D,0x00,0x02,0x20,0x00
,0x00,0x00,0x03,0xC0,0x08,0x20,0x00,0x00,0x00,0x03,0xE0,0x04,0x11,0x40,0x00,0x00
,0x01,0xF1,0x08,0x11,0x40,0x00,0x0F,0xE0,0x13,0x08,0x09,0x60,0x00,0x07,0xFC,0x01
,0x88,0x09,0x20,0x00,0x0F,0xF8,0x01,0x20,0x04,0xC0,0x00,0x3F,0xF0,0x01,0x30,0x0C
,0x00,0x01,0xFF,0xE0,0x00,0x20,0x02,0x00,0x07,0xFF,0xE0,0x00,0x20,0x02,0x00,0x1F
,0xFF,0xC0,0x00,0xC0,0x01,0x01,0xFF,0xFD,0xC1,0x00,0x80,0x00,0x83,0xFF,0xF0,0x82
,0x03,0x00,0x00,0xAF,0xFF,0xC0,0x01,0x00,0x00,0x00,0x7F,0xFF,0x18,0x05,0x8C,0x00
,0x00,0x7F,0xFC,0x04,0x02,0x88,0x00,0x03,0xFF,0xF0,0x38,0x00,0x30,0x00,0x03,0xFF
,0x80,0x24,0x00,0xC0,0x00,0x01,0xFF,0x40,0x18,0x07,0x80,0x00,0x01,0xF8,0x28,0x00
,0x14,0x00,0x00,0x00,0xE0,0x15,0x4A,0xE8,0x00,0x00,0x00,0x80,0x01,0x2D,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
#define PROBE1_2_WIDTH  116
#define PROBE1_2_HEIGHT 44
#define PROBE1_2_X  6
#define PROBE1_2_Y 6
static unsigned char PROGMEM PROBE1_2[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x80,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x01,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0xFF,0xC0,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F
,0xFE,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8
,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x00
,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x00,0x00,0x00
,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFC,0x00,0x00,0x00,0x00
,0x01,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01
,0xFC,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x03,0xFC
,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0x00
,0x00,0x00,0x00,0x03,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x07,0xFE,0x00,0x00
,0x00,0x00,0x3F,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x07,0xFE,0x00,0x00,0x00
,0x01,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0x00,0x00,0x00,0x1F
,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0x80,0x00,0x01,0xFF,0xFF
,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xC0,0x00,0x0F,0xFF,0xFF,0xFF
,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xF0,0x01,0xFF,0xFF,0xFF,0xFC,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F
,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF
,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF
,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF
,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xC0
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xF8,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00};
#define PROBE1_3_WIDTH  34
#define PROBE1_3_HEIGHT 56
#define PROBE1_3_X  47
#define PROBE1_3_Y 0
static unsigned char PROGMEM PROBE1_3[] = {
0x00,0x07,0xF8,0x00,0x00,0x00,0x30,0x07,0x00,0x00,0x00,0x40,0x00,0xC0,0x00,0x01
,0x80,0x00,0x20,0x00,0x02,0x00,0x00,0x18,0x00,0x04,0x00,0x00,0x04,0x00,0x08,0x00
,0x00,0x04,0x00,0x10,0x00,0x00,0x02,0x00,0x10,0x00,0x00,0x01,0x00,0x20,0x00,0x00
,0x01,0x00,0x40,0x00,0x00,0x00,0x80,0x40,0x00,0x00,0x00,0x80,0x40,0x00,0x00,0x00
,0x00,0x80,0x00,0x00,0x00,0x40,0x80,0x00,0x00,0x00,0x40,0x80,0x00,0x40,0x00,0x40
,0x80,0x12,0xD8,0x00,0x40,0x80,0x1D,0xB2,0x00,0x00,0x80,0x09,0x2E,0x00,0x40,0x80
,0x08,0x00,0x00,0x00,0x80,0x08,0x04,0x00,0x40,0x80,0x08,0x04,0x00,0x40,0x80,0x00
,0x04,0x00,0x40,0x40,0x04,0x00,0x00,0x40,0x40,0x04,0x08,0x00,0x40,0x40,0x04,0x08
,0x00,0x80,0x20,0x04,0x10,0x00,0x80,0x20,0x02,0x10,0x00,0x80,0x00,0x02,0x10,0x01
,0x00,0x10,0x02,0x00,0x01,0x00,0x08,0x02,0x20,0x02,0x00,0x08,0x02,0x20,0x04,0x00
,0x04,0x02,0x20,0x08,0x00,0x02,0x02,0x20,0x08,0x00,0x02,0x02,0x20,0x10,0x00,0x01
,0x02,0x20,0x20,0x00,0x01,0x02,0x20,0x20,0x00,0x00,0x82,0x20,0x40,0x00,0x00,0x82
,0x20,0x00,0x00,0x00,0x82,0x20,0x80,0x00,0x00,0x82,0x20,0x80,0x00,0x00,0x82,0x20
,0x80,0x00,0x00,0x82,0x20,0x80,0x00,0x00,0x62,0x23,0x00,0x00,0x00,0x7F,0xFF,0x00
,0x00,0x00,0x7F,0xFF,0x00,0x00,0x00,0x3F,0xFE,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00
,0x00,0x7F,0xFF,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x7F,0xFF,0x00,0x00,0x00
,0x3F,0xFE,0x00,0x00,0x00,0x3F,0xFE,0x00,0x00,0x00,0x1F,0xFC,0x00,0x00,0x00,0x0F
,0xF0,0x00,0x00,0x00,0x03,0xE0,0x00,0x00};
#define PROBE1_4_WIDTH  74
#define PROBE1_4_HEIGHT 56
#define PROBE1_4_X  27
#define PROBE1_4_Y 0
static unsigned char PROGMEM PROBE1_4[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xB0
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0xF8,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x7D,0xEE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x57,0xB7,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x16,0x7D,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x0B,0xB6,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xED,0xB8,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x01,0x3B,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEF
,0x5D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2D,0xD7,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x15,0xB2,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x7D,0xB8
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xDA,0xBC,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x01,0x6F,0x57,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x53,0xCD,0x80,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x2E,0x76,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x13,0x5B,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0xDD,0xBC,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x02,0xDB,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB6
,0xCF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2D,0xEB,0x40,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x17,0x76,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0xAA,0xF0
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xDB,0x5E,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x01,0x6D,0x55,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0xD6,0xC0,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0x34,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x13,0xCB,0x58,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x7B,0xAE,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x03,0x65,0x71,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBD
,0x54,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xD5,0x40,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x1A,0xA0,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x40,0x20
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x01,0x70,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x08,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x2D,0x46,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x01,0xD2,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x08,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08
,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x40
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
// IMAGES BEGIN
// #######################################################

// Display constants

#define OLED_DC A2
#define OLED_CS A4
#define OLED_CLK A1
#define OLED_MOSI A0
#define OLED_RESET A3
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

// Keypad constants

const byte ROWS = 4; //four rows
const byte COLS = 3; //three columns
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};
byte rowPins[ROWS] = {2, 3, 4, 5}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {6, 7, 8}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

// Printer constants

int printer_RX_Pin = 12;  // This is the green wire
int printer_TX_Pin = 13;  // This is the yellow wire
Adafruit_Thermal printer(printer_RX_Pin, printer_TX_Pin);

// What mini-puzzle we're on. A = first, B = second, etc.
// This is also the character we send to the RF transmitter.
char runMode = 'A';

void startupAnimation();

void setup()   
{                
  Serial.begin(400);

  // Display init
  display.begin(SSD1306_SWITCHCAPVCC);
  
  // Keypad init
  keypad.setDebounceTime(4);
  
  // Printer init
  printer.begin();
  
  // Boot sequence
#ifdef DEBUG_SKIP_STARTUP
#else
  startupAnimation();
#endif

}

void startupAnimation()
{
  unsigned char width = 5;
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE, BLACK);
  display.println(F("Unstable shutdown"));
  display.println(F("detected."));
  display.println(F("Initiating Power-On"));
  display.println(F("Self Test."));
  display.drawRoundRect(0, SSD1306_LCDHEIGHT / 4 * 3, SSD1306_LCDWIDTH, 15, 3, WHITE);
  display.fillRoundRect(0, SSD1306_LCDHEIGHT / 4 * 3, width, 15, 3, WHITE);
  display.display();
  while (width < SSD1306_LCDWIDTH)
  {
#ifdef DEBUG_FAST_STARTUP_ANIM
    //delay(5);
#else
    delay(500);
#endif
    width = min(width + 5, SSD1306_LCDWIDTH);
    display.fillRect(0, SSD1306_LCDHEIGHT / 2 + 4, SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT / 8, BLACK);
    display.setCursor(0, SSD1306_LCDHEIGHT / 2 + 4);
    if (width < 20)
      display.print(F(" LOGIC CORE:"));
    else if (width < 40)
      display.print(F(" LOGIC CORE:GOOD"));
    else if (width < 60)
      display.print(F(" FUEL CELL:"));
    else if (width < 80)
      display.print(F(" FUEL CELL:BAD"));
    else if (width < 100)
      display.print(F(" MICROCODE:"));
    else
      display.print(F(" MICROCODE:DAMAGED"));
    
    display.fillRoundRect(0, SSD1306_LCDHEIGHT / 4 * 3, width, 15, 3, WHITE);
    display.display();
  }
}

// Print a "COMM PROBE DAMAGED splash screen and wait for a key press.
void damageSplashScreen()
{
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE, BLACK);
  display.setCursor(0, 0);
  display.print(F("COMM PROBE"));
  display.setCursor(0, SSD1306_LCDHEIGHT / 8 * 2);
  display.print(F("DAMAGED"));
  display.setTextSize(1);
  display.setCursor(0, SSD1306_LCDHEIGHT - SSD1306_LCDHEIGHT / 8 - 1);
  display.print(F("Press any key..."));
  display.display();
  while(1)
  {
    if (0 != keypad.getKey())
      return;
    delay(100);
  }
}

// Interactively get an entry. Return the entry.
void cyclePictureDataEntry(char *entry, unsigned char maxLength)
{
  unsigned int broadcastCounter = 100;
  unsigned int displayCounter = 0;
  unsigned char displayCycle = 0;
  char key = 0;
  char pos = 0;
  *entry = 0;
#if 0
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE, BLACK);
  display.setCursor(0, SSD1306_LCDHEIGHT / 8 * 3);
  display.println(F("Enter memory address\nof repair subroutine\nto execute?"));
  display.setTextSize(2);
  display.display();
#endif

  while(1)
  {
    if (0 == displayCounter)
    {
        display.clearDisplay();
        switch(displayCycle)
        {
            case 0:
                display.setTextSize(1);
                display.setTextColor(WHITE, BLACK);
                display.setCursor(0, SSD1306_LCDHEIGHT / 8 * 4);
                display.println(F(
                    "Enter 4-digit memory\n"
                    "address of repair\n"
                    "routine to execute:"));
                break;
            case 1:
                display.drawBitmap(PROBE1_1_X, PROBE1_1_Y, PROBE1_1, PROBE1_1_WIDTH, PROBE1_1_HEIGHT, WHITE);
                break;
            case 2:
                display.drawBitmap(PROBE1_2_X, PROBE1_2_Y, PROBE1_2, PROBE1_2_WIDTH, PROBE1_2_HEIGHT, WHITE);
                break;
            case 3:
                display.drawBitmap(PROBE1_3_X, PROBE1_3_Y, PROBE1_3, PROBE1_3_WIDTH, PROBE1_3_HEIGHT, WHITE);
                break;
            case 4:
                display.drawBitmap(PROBE1_4_X, PROBE1_4_Y, PROBE1_4, PROBE1_4_WIDTH, PROBE1_4_HEIGHT, WHITE);
                break;
        }
        display.setCursor(0, SSD1306_LCDHEIGHT / 8 * 7);
        display.print(">");
        display.print(entry);
        display.setTextColor(BLACK, WHITE); // 'inverted' text
        display.print(" ");
        display.setTextColor(WHITE, BLACK);
        display.display();
    }
    key = keypad.getKey();
    if (key >= '0' && key <= '9' && pos < maxLength)
    {
      entry[pos] = key;
      entry[pos + 1] = 0;
      pos++;
    }
    if ('*' == key && pos > 0)
    {
      pos--;
      entry[pos] = 0;
    }
    if (0 == displayCounter || 0 != key)
    {
        display.fillRect(0, SSD1306_LCDHEIGHT / 8 * 7, SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT, BLACK);
        display.setCursor(0, SSD1306_LCDHEIGHT / 8 * 7);
        display.print(">");
        display.print(entry);
        display.setTextColor(BLACK, WHITE); // 'inverted' text
        display.print(" ");
        display.setTextColor(WHITE, BLACK);
        display.display();
    }
    if ('#' == key)
      return;
    delay(10);
    // Broadcast run mode via RF every 50ms.
    // TODO: this is a cumulative 50ms delay, but what about the execution time of updating the display?
    if (broadcastCounter++ >= 5)
    {
        Serial.write(runMode);
        broadcastCounter = 0;
    }
    if (displayCounter++ > 400)
    {
        displayCounter = 0;
        displayCycle = (displayCycle + 1) % 5; // four pictures plus a text screen
    }
  }
}

unsigned char printEntry(const char *entry)
{
#if 1
  if (strcmp_P(entry, PSTR("42")) == 0)
  {
    printer.inverseOn();
    printer.println(F(" EXECUTING REPAIR CODE 42 "));
    printer.inverseOff();
    printer.println(F("\nDon't Panic!\n\n\n\n"));
    return 1;
  }
#endif
#if 1
  if (strcmp_P(entry, PSTR("911")) == 0)
  {
    printer.inverseOn();
    printer.println(F(" EXECUTING REPAIR CODE 911 "));
    printer.inverseOff();
    printer.println(F("\n911 is a joke in your town.\n\n\n\n"));
    return 1;
  }
#endif
#if 1
  if (strcmp_P(entry, PSTR("411")) == 0)
  {
    printer.inverseOn();
    printer.println(F(" EXECUTING REPAIR CODE 411 "));
    printer.inverseOff();
    printer.println(F("\nDirectory services are\nunavailable\n\n\n\n"));
    return 1;
  }
#endif
#if 1
  if (strcmp_P(entry, PSTR("8675309")) == 0)
  {
    printer.inverseOn();
    printer.println(F(" EXECUTING REPAIR CODE 867-5309 "));
    printer.inverseOff();
    printer.println(F("\nJenny, I got your number\nI need to make you mine\nJenny, don't change your number\n867-5309\n\n\n\n"));
    return 1;    
  }
#endif
#if 1
  if (strcmp_P(entry, PSTR("4815162342")) == 0)
  {
    printer.inverseOn();
    printer.println(F(" EXECUTING REPAIR CODE \"LOST\" "));
    printer.inverseOff();
    printer.println(F(
      "This device is a gift to you.\n"
      "\n"
      "It is an Open Source platform\n"
      "built around the Arduino.\n"
      "Details of the build\n"
      "process, hardware, and software\n"
      "are at:\n"));
    printer.doubleHeightOn();
    printer.println(F("http://nja.me/probe"));
    printer.doubleHeightOff();
    printer.println(F(
      "\n"
      "This is a great platform for\n"
      "learning the Arduino, whether\n"
      "for messing around, home\n"
      "automation, or puzzle design.\n"
      "If you have specific project\n"
      "ideas, let me help you out.\n\n\n\n\n"));
    printer.setSize('M');
    return 1;
  }
#endif
#if 1
  if (strcmp_P(entry, PSTR("99999")) == 0) // TODO: final code here
  {
    printer.inverseOn();
    printer.println(F(" >>STORED MESSAGE<< "));
    printer.inverseOff();
    printer.underlineOn();
    printer.println(F("All ships"));
    printer.underlineOff();
    printer.println(F(
      "\n"
      "The fleet will stop at Sol V to\n"
      "resupply metallic hydrogen\n"
      "before final assault on\n"
      "Sol III. Maintain silence and\n"
      "safe distance from sensors on\n"
      "Jupiter Station. Due to\n"
      "unexpected spacetime anomaly.\n"
      "half the fleet will attack a\n"
      "defenseless human homeworld.\n"
      "Strip the planet of resources\n"
      "and return to prime dimension\n"
      "immediately. Beware of\n"
      "interdimensional flux.\n\n\n\n\n"));
    return 1;
  }
#endif
  return 0;
}

void printBadEntry()
{
  unsigned char i;
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE, BLACK);
  display.setCursor(0, 0);
  for (i = 1; i <= 21 * 4 + 2; i++)
  {
    if ('\n' != i)
    {
      display.write(i);
      display.display();
    }
  }
  display.setTextSize(2);
  for (i = 0; i < 20; i++)
  {
    display.setCursor(16, SSD1306_LCDHEIGHT / 2 + 10);
    if (i % 2 == 0)
      display.setTextColor(BLACK, WHITE);
    else
      display.setTextColor(WHITE, BLACK);
    display.print("BAD ADDR");
    display.display();
    delay(100);
  }
}

char entry[32] = {0};
void loop()
{
  damageSplashScreen();
  while (1)
  {
    memset(entry, 0, sizeof(entry));
    cyclePictureDataEntry(entry, 11);
    if (!printEntry(entry))
    {
      printBadEntry();
    }
  }
  
}

